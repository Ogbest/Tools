using System;
using System.Collections.Generic;
using MongoDB.Bson.Serialization.Attributes;
using ProtoBuf;

namespace ET
{
    [ProtoContract]
    [Config]
    public partial class (ConfigName)Category : ProtoObject
    {
        public static (ConfigName)Category Instance;
		
        [ProtoIgnore]
        [BsonIgnore]
        private Dictionary<Type, Dictionary<int, IConfig>> dicts = new Dictionary<Type, Dictionary<int, IConfig>>();
		
(ConfigList)
		
        public (ConfigName)Category()
        {
            Instance = this;
        }
		
		[ProtoAfterDeserialization]
        public void AfterDeserialization()
        {
			dicts.Clear();
			
(ConfigDeserialization)
			this.EndInit();
        }

        public bool ContainType(Type type)
        {
            return this.dicts.ContainsKey(type);
        }

        public bool Contain<T>(int id) where T : class, IConfig
        {
            Type type = typeof(T);
            return Contain(type, id);
        }

        public bool Contain(Type type, int id)
        {
            if (this.dicts.TryGetValue(type, out Dictionary<int, IConfig> values))
            {
                return values.ContainsKey(id);
            }
            return false;
        }

        public Dictionary<int, T> GetAll<T>() where T : class, IConfig
        {
            Type type = typeof(T);
            Dictionary<int, IConfig> configs = GetAll(type);

            if (configs == null) return null;

            Dictionary<int, T> values = new Dictionary<int, T>(configs.Count);
            foreach (var item in configs)
            {
                values.Add(item.Key, item.Value as T);
            }
            return values;
        }

        public Dictionary<int, IConfig> GetAll(Type type)
        {
            if (this.dicts.TryGetValue(type, out Dictionary<int, IConfig> value))
            {
                return value;
            }
            return null;
        }

        public T GetOne<T>(int id) where T : class, IConfig
        {
            Type type = typeof(T);
            try
            {
                IConfig config = GetOne(type, id);
                if (config != null)
                {
                    return config as T;
                }
            }
            catch (Exception)
            {

            }
            return null;
        }

        public IConfig GetOne(Type type, int id)
        {
            if (dicts.TryGetValue(type, out Dictionary<int, IConfig> dict))
            {
                if (dict.TryGetValue(id, out IConfig config))
                {
                    return config;
                }
            }
            return null;
        }
(Classes)
    }
}
